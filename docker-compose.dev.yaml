services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      - PORT=${BACKEND_PORT}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB=${DB_NAME}
      - AI_KEY=${AI_KEY}
      - RECAPTCHA_SECRET_KEY=${RECAPTCHA_SECRET_KEY}
      - ENV=development
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_HOST=${EMAIL_HOST}
      - FRONTEND_URL_DEV=${FRONTEND_URL_DEV}
      - ERROR_LOG=${ERROR_LOG}
      - COMBINED_LOG=${COMBINED_LOG}
    restart: always
    volumes:
      - ./backend:/app
      - ./backend/app/logs:/app/logs
    depends_on:
      - db
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - app_network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "${FRONTEND_PORT_DEV}:${FRONTEND_PORT_DEV}"
    volumes:
      - ./frontend:/app
    environment:
      - WDS_SOCKET_HOST=127.0.0.1 
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true 
    restart: always
    depends_on:
      - backend
    networks:
      - app_network

  db:
    image: postgres:17.0
    container_name: database
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network

networks:
  app_network:

volumes:
  pgdata: